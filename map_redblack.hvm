(IfElse 1 yeah nope) = yeah
(IfElse 0 yeah nope) = nope

// type Color {
//   red
//   black
// }

// type RedBlack<A: type> {
//   tip
//   tie(color: Color, left: RedBlack<A>, key: U32, val: A, right: RedBlack<A>)
// }

// Get: <A: Type> -> (key: U32, map: RedBlack<A>) -> Maybe<A>
(Get Empty member_key) = None
(Get (Tie color left key value right) member_key) =
  (IfElse
    (< member_key key)
    (Get left member_key)
    (IfElse
      (> member_key key)
      (Get right member_key)
      (Some value)
    )
  )

(Set Empty insert_key value) =
  (Tie
    Color.red
    Empty
    insert_key
    value
    Empty
  )

(Set (Tie color left key value right) insert_key insert_value) =
  (IfElse
    (< insert_key key)
    (Balance
      color
      (Set left insert_key insert_value)
      key
      value
      right
    )
    (IfElse
      (> insert_key key)
      (Balance
        color
        left
        key
        value
        (Set right insert_key insert_value)
      )
      (Tie
        color
        left
        insert_key
        insert_value
        right
      )
    )
  )

// before flattening
(Balance
  Color.black
  (Tie
    Color.red
    (Tie Color.red child0 key0 value0 child1)
    key1
    value1
    child2
  )
  key2
  value2
  child3
) =
  (Tie
    Color.red
    (Tie
      Color.black
      child0
      key0
      value0
      child1
    )
    key1
    value1
    (Tie
      Color.black
      child2
      key2
      value2
      child3
    )
  )

(Balance
  Color.black
  (Tie
    Color.red
    child0
    key0
    value0
    (Tie Color.red child1 key1 value1 child2)
  )
  key2
  value2
  child3
) =
  (Tie
    Color.red
    (Tie
      Color.black
      child0
      key0
      value0
      child1
    )
    key1
    value1
    (Tie
      Color.black
      child2
      key2
      value2
      child3
    )
  )

(Balance
  Color.black
  child0
  key0
  value0
  (Tie
    Color.red
    (Tie Color.red child1 key1 value1 child2)
    key2
    value2
    child3
  )
) =
  (Tie
    Color.red
    (Tie
      Color.black
      child0
      key0
      value0
      child1
    )
    key1
    value1
    (Tie
      Color.black
      child2
      key2
      value2
      child3
    )
  )

(Balance
  Color.black
  child0
  key0
  value0
  (Tie
    Color.red
    child1
    key1
    value1
    (Tie Color.red child2 key2 value2 child3)
  )
) =
  (Tie
    Color.red
    (Tie
      Color.black
      child0
      key0
      value0
      child1
    )
    key1
    value1
    (Tie
      Color.black
      child2
      key2
      value2
      child3
    )
  )
(Balance color left key value right) = (Tie color left key value right)


// Empty : (U32Map a)
// (Get map: (U32Map a), key: U32): (Maybe a)
// (Set map: (U32Map a), key: U32, val: a): U32Map

// setting even numbers until 32 in random order
// maps n => "N"+to_string(n)
(TestMap) = (Set (Set (Set (Set (Set (Set (Set (Set (Set (Set (Set (Set (Set (Set (Set (Set Empty 4 N2) 6 N3) 14 N7) 8 N4) 26 N13) 20 N10) 28 N14) 16 N8) 32 N16) 10 N5) 12 N6) 18 N9) 30 N15) 2 N1) 24 N12) 22 N11)

// precomputed map
//(TestMap) = (Tie (Color.red) (Tie (Color.red) (Empty) 2 (N2) (Empty)) 4 (N4) (Tie (Color.red) (Empty) 6 (N6) (Tie (Color.red) (Tie (Color.red) (Empty) 8 (N8) (Tie (Color.red) (Empty) 10 (N10) (Tie (Color.red) (Empty) 12 (N12) (Empty)))) 14 (N14) (Tie (Color.red) (Tie (Color.red) (Tie (Color.red) (Empty) 16 (N16) (Tie (Color.red) (Empty) 18 (N18) (Empty))) 20 (N20) (Tie (Color.red) (Tie (Color.red) (Empty) 22 (N22) (Empty)) 24 (N24) (Empty))) 26 (N26) (Tie (Color.red) (Empty) 28 (N28) (Tie (Color.red) (Tie (Color.red) (Empty) 30 (N30) (Empty)) 32 (N32) (Empty)))))))

//(Main) = (Get TestMap 8)

  // (Main a b c d e f) = 
  //   let map = Empty
  //   let map = (Set map a A)
  //   let map = (Set map b B)
  //   let map = (Set map c C)
  //   let map = (Set map d D)
  //   let map = (Set map e E)
  //   let map = (Set map f F)
  //   (Get map m)